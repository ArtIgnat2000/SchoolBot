from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Filter
from utils import get_user_name, safe_text_check

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
messages_router = Router()


class TextMessageFilter(Filter):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    async def __call__(self, message: Message) -> bool:
        return message.text is not None and not message.text.startswith('/')


@messages_router.message(TextMessageFilter())
async def text_message_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_text = message.text
    user_name = get_user_name(message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ None
    if not user_text:
        await message.answer("ü§î –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if safe_text_check(user_text, ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
            f"–ö–∞–∫ –¥–µ–ª–∞ –≤ —à–∫–æ–ª–µ?"
        )
    elif safe_text_check(user_text, ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye']):
        await message.answer(
            f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user_name}! üëã\n"
            f"–£–¥–∞—á–∏ –≤ —É—á—ë–±–µ!"
        )
    elif safe_text_check(user_text, ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
        await message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, {user_name}! üòä\n"
            f"–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!"
        )
    elif safe_text_check(user_text, ['—à–∫–æ–ª–∞', '—É—á—ë–±–∞', '—É—Ä–æ–∫']):
        await message.answer(
            f"üìö –û—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ —Å–≤–æ–∏—Ö —à–∫–æ–ª—å–Ω—ã—Ö –¥–µ–ª–∞—Ö.\n"
            f"–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑—É—á–∞–µ—à—å?"
        )
    else:
        # –≠—Ö–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await message.answer(
            f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: <i>{user_text}</i>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏!"
        )


@messages_router.message()
async def other_message_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.)
    """
    if message.photo:
        await message.answer("üì∏ –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∏—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
    elif message.video:
        await message.answer("üé• –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤–∏–¥–µ–æ! –ñ–∞–ª—å, —á—Ç–æ —è –Ω–µ –º–æ–≥—É –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.")
    elif message.document:
        await message.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω! –ü–æ–∫–∞ —è –Ω–µ —É–º–µ—é –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.")
    elif message.sticker:
        await message.answer("üòÑ –ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! –Ø —Ç–æ–∂–µ –ª—é–±–ª—é —Å—Ç–∏–∫–µ—Ä—ã!")
    elif message.voice:
        await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∏—Ö —Å–ª—É—à–∞—Ç—å.")
    else:
        await message.answer("ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É.")


def register_messages(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    """
    dp.include_router(messages_router)