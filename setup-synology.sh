#!/bin/bash

# –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ School Bot –¥–ª—è Synology
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑

echo "üéì School Bot - –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Synology"
echo "================================================"
echo ""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_synology() {
    if ! grep -q "synology" /proc/version 2>/dev/null; then
        warning "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –Ω–µ –Ω–∞ Synology NAS"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " continue_setup
        if [[ ! $continue_setup =~ ^[Yy]$ ]]; then
            echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
            exit 1
        fi
    else
        success "–û–±–Ω–∞—Ä—É–∂–µ–Ω Synology NAS"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    if [ -f .env ]; then
        warning ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): " overwrite
        if [[ ! $overwrite =~ ^[Yy]$ ]]; then
            info "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª"
            return
        fi
    fi
    
    echo ""
    info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    echo ""
    
    # –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: " bot_token
        if [[ -n "$bot_token" && $bot_token =~ ^[0-9]{8,10}:[a-zA-Z0-9_-]{35}$ ]]; then
            break
        else
            error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –ü—Ä–∏–º–µ—Ä: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
        fi
    done
    
    # –ó–∞–ø—Ä–æ—Å Admin ID
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (–∞–¥–º–∏–Ω): " admin_id
        if [[ $admin_id =~ ^[0-9]+$ ]] && [ ${#admin_id} -ge 6 ]; then
            break
        else
            error "Admin ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (6+ —Ü–∏—Ñ—Ä)"
            info "–ù–∞–π—Ç–∏ —Å–≤–æ–π ID: –Ω–∞–ø–∏—à–∏—Ç–µ @userinfobot –≤ Telegram"
        fi
    done
    
    # –í—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"
    echo "1) Europe/Moscow (UTC+3)"
    echo "2) Europe/Kiev (UTC+2)" 
    echo "3) Asia/Almaty (UTC+6)"
    echo "4) Asia/Tashkent (UTC+5)"
    echo "5) –î—Ä—É–≥–æ–π (–≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)"
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ (1-5) [1]: " tz_choice
    tz_choice=${tz_choice:-1}
    
    case $tz_choice in
        1) timezone="Europe/Moscow" ;;
        2) timezone="Europe/Kiev" ;;
        3) timezone="Asia/Almaty" ;;
        4) timezone="Asia/Tashkent" ;;
        5) 
            read -p "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/London): " timezone
            ;;
        *) timezone="Europe/Moscow" ;;
    esac
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    cat > .env << EOF
# Telegram Bot Configuration
BOT_TOKEN=$bot_token
ADMIN_ID=$admin_id

# Python Configuration  
PYTHONUNBUFFERED=1

# Timezone Configuration
TZ=$timezone

# Optional: Database Configuration (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
# DB_HOST=postgres
# DB_NAME=school_bot
# DB_USER=bot_user
# DB_PASSWORD=secure_password_here

# Optional: Redis Configuration (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) 
# REDIS_URL=redis://redis:6379/0
EOF

    chmod 600 .env
    success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose
choose_configuration() {
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    echo ""
    echo "1) üê≥ –¢–æ–ª—å–∫–æ –±–æ—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞)"
    echo "   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"
    echo "   - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"
    echo ""
    echo "2) üóÑÔ∏è –ë–æ—Ç + –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL"
    echo "   - –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
    echo "   - –ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
    echo ""
    echo "3) üöÄ –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ë–æ—Ç + DB + Redis + Nginx)"
    echo "   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    echo "   - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    echo ""
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (1-3) [1]: " config_choice
    config_choice=${config_choice:-1}
    
    case $config_choice in
        1)
            COMPOSE_FILE="docker-compose.synology.yml"
            info "–í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
            ;;
        2)
            COMPOSE_FILE="docker-compose.synology.yml"
            info "–í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
            warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å PostgreSQL —Å–µ–∫—Ü–∏—é –≤ docker-compose —Ñ–∞–π–ª–µ"
            ;;
        3)
            COMPOSE_FILE="docker-compose.synology.yml"
            info "–í—ã–±—Ä–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
            warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
            ;;
        *)
            error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            COMPOSE_FILE="docker-compose.synology.yml"
            ;;
    esac
    
    echo "COMPOSE_FILE=$COMPOSE_FILE" > .deploy-config
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
check_resources() {
    echo ""
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAM
    total_ram=$(free -m | awk 'NR==2{printf "%.0f", $2}')
    if [ "$total_ram" -lt 512 ]; then
        warning "–ú–∞–ª–æ RAM: ${total_ram}MB. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 512MB"
    else
        success "RAM: ${total_ram}MB - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    free_space=$(df -BG . | awk 'NR==2 {print $4}' | sed 's/G//')
    if [ "$free_space" -lt 2 ]; then
        warning "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${free_space}GB. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2GB"
    else
        success "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${free_space}GB - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p logs
    mkdir -p data
    mkdir -p backups
    
    chmod 755 logs data backups
    
    success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Synology)
setup_autostart() {
    if ! grep -q "synology" /proc/version 2>/dev/null; then
        info "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Synology NAS"
        return
    fi
    
    echo ""
    read -p "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã? (Y/n): " setup_auto
    setup_auto=${setup_auto:-y}
    
    if [[ $setup_auto =~ ^[Yy]$ ]]; then
        info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        cat > start-school-bot.sh << 'EOF'
#!/bin/bash
cd /volume1/docker/school-bot
docker-compose -f docker-compose.synology.yml up -d
EOF
        
        chmod +x start-school-bot.sh
        
        warning "–î–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –≤ Control Panel > Task Scheduler:"
        echo "bash /volume1/docker/school-bot/start-school-bot.sh"
        
        success "–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω"
    fi
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
final_check() {
    echo ""
    info "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    local files=("Dockerfile" "docker-compose.synology.yml" "requirements.txt" "main.py" ".env")
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            success "$file –Ω–∞–π–¥–µ–Ω"
        else
            error "$file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
            return 1
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env
    if grep -q "your_bot_token_here" .env; then
        error "BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env!"
        return 1
    fi
    
    if grep -q "your_admin_id_here" .env; then
        error "ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env!"
        return 1
    fi
    
    success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
    return 0
}

# –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∑–∞–ø—É—Å–∫—É
show_instructions() {
    echo ""
    echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo "======================"
    echo ""
    echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo ""
    echo "1Ô∏è‚É£  –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:"
    echo "   bash deploy-synology.sh"
    echo ""
    echo "2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:"
    echo "   docker logs school-bot -f"
    echo ""
    echo "3Ô∏è‚É£  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:"
    echo "   bash deploy-synology.sh --stop"
    echo ""
    echo "4Ô∏è‚É£  Container Manager:"
    echo "   http://$(hostname -I | awk '{print $1}'):5000"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "   - SYNOLOGY_DEPLOYMENT.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
    echo "   - DOCKER_GUIDE.md - —Ä–∞–±–æ—Ç–∞ —Å Docker"
    echo "   - WEB_INTEGRATION.md - –≤–µ–±-—Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞"
    echo ""
    
    read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–µ–π—á–∞—Å? (Y/n): " start_now
    start_now=${start_now:-y}
    
    if [[ $start_now =~ ^[Yy]$ ]]; then
        echo ""
        info "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
        if [ -f deploy-synology.sh ]; then
            bash deploy-synology.sh
        else
            error "deploy-synology.sh –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_synology
    create_env_file
    choose_configuration
    check_resources
    setup_directories
    setup_autostart
    
    if final_check; then
        show_instructions
    else
        error "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
main